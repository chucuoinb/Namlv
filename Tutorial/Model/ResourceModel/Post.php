<?php
/**
 * Created by PhpStorm.
 * User: root
 * Date: 12/07/2017
 * Time: 09:50
 */

namespace Namlv\Tutorial\Model\ResourceModel;


use Magento\Framework\App\Filesystem\DirectoryList;
use Magento\Framework\Model\AbstractModel;
use Magento\Framework\Model\ResourceModel\Db\AbstractDb;
use Magento\Framework\Model\ResourceModel\Db\Context;
use Magento\Store\Model\Store;
use Magento\Store\Model\StoreManagerInterface;

class Post extends AbstractDb
{
    const FILE_PATH_UPLOADED = 'namlv' . DIRECTORY_SEPARATOR . 'tutorial' . DIRECTORY_SEPARATOR . 'image' . DIRECTORY_SEPARATOR;
    const FILE_PATH_ACCESS = 'namlv/tutorial/image/';
    /**
     * @var \Psr\Log\LoggerInterface
     */
    protected $logger;
    /**
     * Store manager
     *
     * @var StoreManagerInterface
     */
    protected $storeManager;

    /**
     * @var \Namlv\Tutorial\Helper\Post
     */
    protected $directoryList;
    public function __construct(
        StoreManagerInterface $storeManager,
        Context $context, $connectionName = null,
        \Psr\Log\LoggerInterface $loggerInterface,
        \Magento\Framework\App\Filesystem\DirectoryList $directoryList
)
    {
        $this->directoryList = $directoryList;
        $this->storeManager = $storeManager;
        $this->logger = $loggerInterface;
        parent::__construct($context, $connectionName);
    }

    /**
     * Resource initialization
     *
     * @return void
     */
    protected function _construct()
    {
        $this->_init('namlv_tutorial_post', 'id');
    }

    protected function _beforeSave(AbstractModel $object)
    {
        return parent::_beforeSave($object); // TODO: Change the autogenerated stub
    }

//    public function getPostStore($id)
//    {
//        if (!$id || ($id && (int)$id < 0)) {
//            return false;
//        }
//        $select = $this->getConnection()->select()
//            ->from(['post' => $this->getMainTable()])
//            ->where('post.id =?', $id)
//            ->limit(1);
//        if ($result = $this->getConnection()->fetchRow($select))
//            return $result;
//        return false;
//    }
//
//    public function isExistPost($id)
//    {
//        if (!$id || ($id && (int)$id < 0)) {
//            return false;
//        }
//        $select = $this->getConnection()->select()
//            ->from(['post' => $this->getMainTable()])
//            ->where('post.id =?', $id)
//            ->limit(1);
//        if (count($this->getConnection()->fetchAssoc($select)) > 0)
//            return true;
//        return false;
//    }

    protected function _afterLoad(AbstractModel $object)
    {
        $this->getPostStores($object);
        $this->logger->debug('hihi: '.json_encode($object->getData('stores')));
        return parent::_afterLoad($object); // TODO: Change the autogenerated stub
    }

    protected function _afterSave(AbstractModel $object)
    {
        $this->savePostStore($object);
        return parent::_afterSave($object); // TODO: Change the autogenerated stub
    }

    protected function _afterDelete(AbstractModel $object)
    {
        $this->deletePostStore($object);
        $this->deleteImagePost($object);
        return parent::_afterDelete($object); // TODO: Change the autogenerated stub
    }

    public function savePostStore(AbstractModel $object)
    {
        $post_id = $object->getData('id');
        $stores = $this->getStores($object);
        $dataInsert = array();
        if ($post_id && (int)$post_id > 0) {
            $connect = $this->getConnection();
            if ($stores) {
                $connect->delete($this->getTable('namlv_tutorial_post_store'), ['post_id =? ' => (int)$post_id]);
                foreach ($stores as $store_id) {
                    $dataInsert[] = [
                        'post_id' => (int)$post_id,
                        'store_id' => (int)$store_id
                    ];
                }
                $connect->insertMultiple($this->getTable('namlv_tutorial_post_store'), $dataInsert);
            }
        }
    }

    public function deletePostStore(AbstractModel $object)
    {
        $post_id = $object->getData('post_id');
        if ($post_id && (int)$post_id > 0) {
            $this->getConnection()->delete(
                $this->getTable('namlv_tutorial_post_store'),
                ['post_id = ?' => (int)$post_id]
            );
        }
    }

    public function getStores(AbstractModel $object)
    {
        if ($this->storeManager->hasSingleStore()) {
            $stores = [Store::DEFAULT_STORE_ID];
        } else {
            $stores = (array)$object->getData('stores');
        }
        $temp = array();
        $flag = false;
        foreach ($stores as $store) {
            if ($store == Store::DEFAULT_STORE_ID) {
                $flag = true;
                break;
            }
        }
        if ($flag) {
            $_stores = $this->storeManager->getStore(true, false);
            foreach ($_stores as $item) {
                if ($item->getData('is_active')) {
                    $temp[] = $item->getData('store_id');
                }
            }
        }
        $stores = array_unique(array_merge($stores, $temp));
        return $stores;
    }

    public function getPostStores(AbstractModel $object)
    {
        $post_id = $object->getData('id');
        if ($post_id && (int)$post_id > 0) {
            $postStore = $this->getConnection()
                ->select()
                ->from(['stores' => $this->getTable('namlv_tutorial_post_store')],['store_id'])
                ->where('post_id = ?', $object->getData('id'));
            $stores = $this->getConnection()->fetchCol($postStore);
            if ($stores){
                $object->setData('stores',$stores);
            }
        }
//        return $object;
    }

    public function deleteImagePost(AbstractModel $object){
        $postPathUpload = $this->directoryList->getRoot() . DIRECTORY_SEPARATOR . DirectoryList::PUB . DIRECTORY_SEPARATOR . DirectoryList::MEDIA . DIRECTORY_SEPARATOR;
        $image = $object->getData('image');
        if ($image && file_exists($postPathUpload.$image))
            unlink($postPathUpload.$image);
    }

}